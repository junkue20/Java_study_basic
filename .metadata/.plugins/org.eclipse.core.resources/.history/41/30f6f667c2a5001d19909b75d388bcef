package day6;

import org.bson.Document;

import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.result.InsertOneResult;

// 기능용 클래스
// 몽고DB 연동

public class MemberDB {
	MongoCollection<Document> collecttion = null;

	// 변수는 모든 메소드에 사용 가능하기 위해 바깥으로 뺌.
	
	// 변수 X
	// 생성자
	public MemberDB() {
		// 공통변수가 아니기 때문에 생성자 내부에서만 사용가능한 변수 생성.

		// final 을 붙이면 생성 당시의 값으로 프로그램이 끝날때 까지 유지가 된다. 이유는 바꿀수 없기 때문.
		// mongodb://아이디:비밀번호@주소:포트번호/디비명

		final String url = "mongodb://id209:pw2091.234.5.158:37017/db209";

		// static클래스를 통해서 접속이 가능함. (import도 해주어야 함.)
		MongoClient client = MongoClients.create(url);
		MongoDatabase db = client.getDatabase("db209");
		this.collecttion = db.getCollection("members");

	}

	// 회원가입 메소드
	public int insertMember(Member member) {
		try { // 정상동작
			Document doc = new Document();
			doc.append("_id", member.getId());
			doc.append("_password", member.getPassword());
			doc.append("_name", member.getName());
			doc.append("_age", member.getAge());
			doc.append("_phone", member.getPhone());
			doc.append("_role", member.getRole());
			doc.append("_regdate", member.getRegdate());
			
			InsertOneResult result = this.collecttion.insertOne(doc);
			System.out.println(result.toString());
			return 1;
			
		} 
		catch (Exception e) {// 오류가 발생 시 이쪽의 메소드가 수행됨.
			
			// Exception클래스의 e변수에 오류의 정보(오류 메시지)가 전송되게 됨.
			e.printStackTrace(); // 오류 메세지를 전체적으로 출력해줌. 개발자를 위한 기능
			
			return -1; // 오류시 보통 -1로 반환함!
		}
	}
}
