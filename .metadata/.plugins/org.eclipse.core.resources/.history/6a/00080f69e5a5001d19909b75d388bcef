package day6;

import org.bson.Document;
import org.bson.conversions.Bson;

import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.Filters;
import com.mongodb.client.model.Updates;
import com.mongodb.client.result.UpdateResult;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

@Getter
@Setter
@ToString
@NoArgsConstructor
@AllArgsConstructor

// 1. 객체 생성
// db서버에 접속하고 members collectin

// 222번껄로 하도록 하자
public class ItemDB {
	MongoCollection<Document> collection = null;

	public ItemDB() {
		
		final String url = "mongodb://id222:pw222@1.234.5.158:37017/db222";
		
		MongoClient client = MongoClients.create(url);
		MongoDatabase db = client.getDatabase("db209");
		this.collection = db.getCollection("members");
		
	}
	
	// 회원정보 수정하기. 이름, 연락처, 나이정보 (암호는 변경 불가능.)
		public int updateMember(Item item) {
			try {
				// 변경하고자 하는 항목의 조건
				/* 2번 */ Bson filter = Filters.eq("_id", item.getId());

				// 변경할 항목들...
				/* 3번 */ Bson update1 = Updates.set("name", item.getName());
				Bson update2 = Updates.set("phone", item.getPhone());
				Bson update3 = Updates.set("age", item.getAge());

				// updateOne (조건, 변경값) => 변경값이 하나의 Bson에만 가능.. combine
				/* 4번 */ Bson update = Updates.combine(update1, update2, update3);

				/* 1번 */ UpdateResult result = this.collection.updateOne(filter, update);
				System.out.println(result.toString());
				return 1;
			} catch (Exception e) {
				e.printStackTrace();
				return -1;
			}

		}

}
