package day6;

import org.bson.Document;
import org.bson.conversions.Bson;

import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoCursor;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.Filters;
import com.mongodb.client.model.Updates;
import com.mongodb.client.result.DeleteResult;
import com.mongodb.client.result.InsertOneResult;
import com.mongodb.client.result.UpdateResult;

// 1. 객체 생성
// db서버에 접속하고 members collectin

// 222번껄로 하도록 하자
public class ItemDB {
	MongoCollection<Document> collection = null;

	// db연결하고 컬렉션을 items로
	public ItemDB() {
		final String url = "mongodb://id222:pw222@1.234.5.158:37017/db222";
		MongoClient client = MongoClients.create(url);
		MongoDatabase db = client.getDatabase("db222");
		this.collection = db.getCollection("items");
	}

	// 물품등록
	public int insertItem(Item item) {
		Document doc = new Document();
		doc.append("_id", item.getCode());
		doc.append("name", item.getName());
		doc.append("content", item.getContent());
		doc.append("price", item.getPrice());
		doc.append("quantity", item.getQuantity());
		doc.append("regdate", item.getRegdate());


		InsertOneResult result = this.collection.insertOne(doc);
		System.out.println(result.toString());
		
		return 1;
	}

	// 전체물품 출력
	public void printItems() {
		MongoCursor<Document> list = this.collection.find().cursor();
		while (list.hasNext()) { // 그 다음 가져 올 데이터가 있는지?
			Document doc = list.next();
			System.out.println("물품코드 =>" + doc.getLong("_id"));
			System.out.println("물품명 =>" + doc.getString("password"));
			System.out.println("물품설명 =>" + doc.getString("content"));
			System.out.println("물품가격 =>" + doc.getLong("price"));
			System.out.println("물품코드 =>" + doc.getLong("quantity"));
			System.out.println("------------------------------------");

		}
	}

	// 물품코드를 이용한 수정
	// 물품명, 물품내용, 가격, 수량 변경가능
	public int updateItem(Item item) {
		try {
			// 변경하고자 하는 항목의 조건
			/* 2번 */ Bson filter = Filters.eq("_id", item.getCode());

			// 변경할 항목들...
			/* 3번 */ Bson update1 = Updates.set("name", item.getName());
			Bson update2 = Updates.set("content", item.getContent());
			Bson update3 = Updates.set("price", item.getPrice());
			Bson update4 = Updates.set("quantity", item.getQuantity());
			// updateOne (조건, 변경값) => 변경값이 하나의 Bson에만 가능.. combine
			/* 4번 */ Bson update = Updates.combine(update1, update2, update3, update4);

			/* 1번 */ UpdateResult result = this.collection.updateOne(filter, update);
			System.out.println(result.toString());
			return 1;
		} catch (Exception e) {
			e.printStackTrace();
			return -1;
		}

	}

	public int deleteItem(String id) {
		try {
			Bson filter = Filters.eq("_id", id);
			DeleteResult result = this.collection.deleteOne(filter);
			System.out.println(result.toString());
			if (result.getDeletedCount() == 1L) {
				return 1;
			}
			return 0;

		} catch (Exception e) {
			e.printStackTrace();
			return -1;
		}
	}

}
