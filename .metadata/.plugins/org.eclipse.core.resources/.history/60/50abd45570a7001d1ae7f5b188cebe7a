package day8;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.bson.Document;
import org.bson.conversions.Bson;

import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.Filters;
import com.mongodb.client.model.Updates;
import com.mongodb.client.result.InsertOneResult;

public class BookDBImpl implements BookDB {

	private MongoCollection<Document> sequence = null;
	private MongoCollection<Document> books = null;

	// 생성자 먼저 생성!
	public BookDBImpl() { // DB에 책 항목 생성
		try {// 몽고DB -> 접속URL -> DB이름
			MongoDatabase db = MongoClients.create(Config.URL).getDatabase(Config.DBNAME);
			this.sequence = db.getCollection("sequence");
			this.books = db.getCollection("books");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public int insertBook(Book book) { // 책등록 (int인 이유는 책넘버가 int이기 때문!)
		try {
			// 책번호(시퀀스를 이용한다!), 등록일자
			Bson filter = Filters.eq("_id", "SEQ_BOOK_NO"); // 책넘버와 DB시퀀스값 해당
			Bson update = Updates.inc("idx", 1); // 1개씩 추가하도록
			Document doc = this.sequence.findOneAndUpdate(filter, update); // 위의 두 객체

			Document doc1 = new Document(); // doc1을 만들어 책의 정보들을 저장할 객체를 생성
			doc1.append("_id", doc.getInteger("idx"));
			doc1.append("title", book.getTitle());
			doc1.append("author", book.getAuthor());
			doc1.append("price", book.getPrice());
			doc1.append("cate", book.getCate());
			doc1.append("regdate", new Date());

			InsertOneResult result = this.books.insertOne(doc1);// 받았던 위의 doc1을 출력
			System.out.println(result);
			if (result.getInsertedId().asInt32().getValue() == doc.getInteger("idx")) {
				return 1;

			}
			return 0;
		} catch (Exception e) {
			e.printStackTrace();
			return -1;
		}
	}

	@Override
	public List<Book> selectBookList() { // 책 전체조회
		try {
			// 반환 타입을 위한 빈 배열 객체 생성
			List<Book> list = new ArrayList<Book>();

			FindIterable<Document> docs = this.books.find();
			// docs의 값을 list로 다 복사하기
			for (Document doc : docs) {
				Book book = new Book();
				book.setNo(doc.getInteger("_id"));
				book.setTitle(doc.getString("title"));
				book.setAuthor(doc.getString("author"));
				book.setPrice(doc.getLong("price"));
				book.setCate(doc.getString("cate").charAt(0)); // String -> char
				book.setDate(doc.getDate("regdate"));

				list.add(book); // 반복횟수만큼 list에 추가하기

			}
			return list;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}

	}

	// 데이터를 최소 21 이상을 추가하세요
	// BookSelectListPageFrame.java
	@Override
	public List<Book> selectBookListPage(int page) { // 책 10개씩 조회
		try {
			Bson sort = Filters.eq("_id", -1); // -1은 내림차순
			// page = 1 => 0, page = 2 =>10, page = 3 => 20
			this.books.find().sort(sort).skip(10 * (page - 1)).limit(10);
		} catch (Exception e) {
			return null;
		}
		return null;
	}

	
	
	@Override
	public int deleteBook(int no) { // 책 삭제

		return 0;
	}

	@Override
	public int updateBook(Book book) { // 책 수정

		return 0;
	}

	@Override
	public Book selectOneBook(int no) { // 책1권 조회 // 반환타입

		return null;
	}

	@Override
	public List<Book> selectBookPrice(long price) { // n이상의 가격에 해당하는 책 조회

		return null;
	}

	@Override
	public List<Book> selectBookCate(char cate) { // 분류에 해당하는 항목만 조회

		return null;
	}

}
